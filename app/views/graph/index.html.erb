<div id="chart"></div>
<h1 id="path">Name Path</h1>
<div class="hr"></div>
<div id="details">
  <div id="inside_me"><!-- INSIDE ME -->
    <h1 class="detail_title">Me:</h1>
    <%= form_tag do %>
      <%= text_field_tag :new_category_name, 'Type name of category to add' %>
      <%= submit_tag("Add") %>
    <% end %>
    <ul>
    </ul>
  </div>
  <!-- INSIDE ME CATEGORY -->
  <div id="inside_me_category">
    <h1 class="detail_title">Connections:</h1>
    <%= form_tag do %>
      <div class="ui-widget">
        <%= text_field_tag :new_connection_name, 'Type name of person' %>
      </div>
      <%= submit_tag("Connect") %>
    <% end %>
    <h3>My Connections:</h3>
    <ul class="in"></ul>
    <h3>Connections to me:</h3>
    <ul class="out"></ul>
  </div>
  <!-- INSIDE PERSON -->
  <div id="inside_person">
    <h1 class="detail_title">Tim Beaver:</h1>
    <p>Majoring in <span id="major">X</span></p>
    <p>Year <span id="year">X</span></p>
    <p>Lives at <span id="lives_at">X</span></p>
    <p>Likes: <span id="likes">X,X,X</span></p>
  </div>
  <!-- INSIDE PERSON CATEGORY -->
  <div id="inside_person_category">
    <h1 class="detail_title">Connections:</h1>
    <ul></ul>
  </div>
</div>
<script type="text/javascript">

var w = 960,
    h = 400,
    node,
    link,
    root,
    path;

var force = d3.layout.force() 
    .on("tick", tick)
    .size([w, h])
    .linkDistance(100)
    .charge(-400);

var vis = d3.select("#chart").append("svg:svg")
    .attr("width", w)
    .attr("height", h);

function path_to_text(p) {
  str = "";
  for (var i=0; i<p.length; i+=1) {
    str += p[i].name+" / ";
  }
  return str;
}

function person_me_callback(root,details) {
  inside = $("#inside_me");
  inside.children(".detail_title").text(details.name);
  l = inside.children("ul");
  l.empty();
  for (var i=0; i < root.children.length; i+=1) {
    l.append("<li>"+root.children[i].name+"</li>");
  }
}

function person_other_callback(root,details) {
  inside = $("#inside_person");
  inside.children(".detail_title").text(details.name);
  inside.children("#major").text(details.course);
  inside.children("#year").text(details.year);
  inside.children("#lives_at").text(details.living_group);
  likes_str = "";
  if (details.likes && details.likes[0] != "empty") {
    for (var i=0; i < details.likes.length; i+=1) {
      if (i != 0) { likes_str += ", "; }
      likes_str += details.likes[i];
    }
  }
  inside.children("#likes").text(likes_str);
}

function person_category_callback(root,details) {
  inside = $("#inside_person_category");
  //inside.children(".detail_title").text(details.name);
  l = inside.children("ul");
  l.empty();
  for (var i=0; i < root.children.length; i+=1) {
    l.append("<li>"+root.children[i].name+"</li>");
  }
}


function path_update(new_path) {
  path = new_path;
  $("#path").text(path_to_text(path));
  last = path[path.length-1];
  console.log("new path");
  console.log(path);
  callback_function = function() {alert("didn't find a callback function");}
  if ( last.type == "person" ) {
    if ( last.name == "<%= @athena_name %>" ) {
      console.log("type: person = me");
      callback_function = person_me_callback;
      $("#inside_me").show();
      $("#inside_me_category").hide();
      $("#inside_person").hide();
      $("#inside_person_category").hide();
    } else {
      console.log("type: person = not me");
      callback_function = person_other_callback;
      $("#inside_me").hide();
      $("#inside_me_category").hide();
      $("#inside_person").show();
      $("#inside_person_category").hide();
    }
  } else if ( last.type == "category" ) {
    console.log("type: category");
    callback_function = person_category_callback;
    $("#inside_me").hide();
    $("#inside_me_category").hide();
    $("#inside_person").hide();
    $("#inside_person_category").show();
  }
  //data: { name: "John", location: "Boston" }
  parent_name = "";
  if (last.type == "category") {
    parent_name = path[path.length-2].name;
  }
  $.ajax({
    type: "GET",
    url: "http://stark-hamlet-8685.herokuapp.com/datapull",
    data: { type: last.type, id: last.id, name: last.name, parent: parent_name }
  }).done(function(data, textStatus, jqXHR ) {
    console.log("data recieved "+textStatus);
    if (data == null) { alert("Data recieved was empty"); }
    //combine current path and new expansion
    if (path.length > 1) {
      root = path[path.length-2];
      root.children = [data.graph];
      for (var i=path.length-3; i>=0; i-=1) {
        newroot = path[i];
        newroot.children = [root];
        root = newroot;
      }
    } else {
      root = data.graph;
    }
    details = data.details;
    console.log(root);
    console.log(details);
    callback_function(data.graph,details);
    update();
  }).fail(function(obj, textStatus, errorThrown ) {
    alert( "Error" );
    console.log("ERROR");
    console.log(obj);
    console.log(textStatus);
    console.log(errorThrown);
  });
}

path_update([{type:"person",id:"first",name:"<%= @athena_name %>"}]);


function update() {
  console.log("updating");
  var nodes = flatten(root),
      links = d3.layout.tree().links(nodes);

  // Restart the force layout.
  force
      .nodes(nodes)
      .links(links)
      .start();

  // Update the links…
  link = vis.selectAll("line.link")
      .data(links, function(d) { return d.target.id; });

  // Enter any new links.
  link.enter().insert("svg:line", ".node")
      .attr("class", "link")
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  // Exit any old links.
  link.exit().remove();

  // Update the nodes…
  node = vis.selectAll("circle.node")
      .data(nodes, function(d) { return d.id; })
      .style("fill", color);

  // Enter any new nodes.
  node.enter().append("svg:circle")
      .attr("class", "node")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", function(d) { return 20+"px"; })
      .style("fill", color)
      .on("click", click)
      .call(force.drag)

  // Exit any old nodes.
  node.exit().remove();


  // Update the labels…
  labels = vis.selectAll("text.label")
      .data(nodes, function(d) { return d.name; });

  // Enter any new labels.
  labels.enter().append("svg:text")
      .text(function(d) {return d.name})
      .attr("class", "label")
      .attr("x", function(d) { return d.x; })
      .attr("y", function(d) { return d.y; })
      .attr("text-anchor", "middle" )
      .attr("font-family", "Arial, Helvetica, sans-serif")
      .attr("font-size", "16px")
      .attr("fill", "black");


  // Exit any old nodes.
  labels.exit().remove();

}

function tick() {
  link.attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  node.attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; });

  labels.attr("x", function(d) { return d.x; })
        .attr("y", function(d) { return d.y; });
}

// Color leaf nodes orange, and packages white or blue.
function color(d) {
  //return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#fd8d3c";
  for (var i=0; i<path.length-1; i+=1) {
    if (d.id == path[i].id) {
      if (d.type == "person") {
        return "#badbc8";
      }
      return "#d2c1b5";
    }
  }
  if (d.type == "person") {
    return "#3cfd8d";
  }
  return "#fd8d3c";
}

// Toggle children on click.
function click(d) {
  /*
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
  */
  for (var i=0; i<path.length; i+=1) {
    if (d.id == path[i].id) {
      path_update(path.slice(0,i+1));
      update();
      return;
    }
  }
  if (d.type == "category") {
    var p = path;
    p.push({type:"category",id:d.id,name:d.name});
    path_update(p);
  } else if (d.type == "person") {
    var p = path;
    p.push({type:"person",id:d.id,name:d.name});
    path_update(p);
  }
  update();
}

// Returns a list of all nodes under the root.
function flatten(root) {
  console.log("Flattening");
  console.log(root);

  var nodes = [], i = 0;

  function recurse(node) {
    if (node.children) node.children.forEach(recurse);
    if (!node.id) node.id = ++i;
    nodes.push(node);
  }

  recurse(root);
  return nodes;
}

</script>
<script>
$(function() {
  $( "#new_connection_name" ).autocomplete({
    source: "http://stark-hamlet-8685.herokuapp.com/userpull",
    minLength: 2,
      source: function( request, response ) {
        var term = request.term;
        $.getJSON( "http://stark-hamlet-8685.herokuapp.com/userpull", request, function( data, status, xhr ) {
          response( data );
        });
      }
  });
});
</script>